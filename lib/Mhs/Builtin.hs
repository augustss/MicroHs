-- Copyright 2023 Lennart Augustsson
-- See LICENSE file for full license.
module Mhs.Builtin(
  module Control.Monad,
  module Control.Monad.Fail,
  module Control.Monad.Fix,
  module Data.Bool,
  module Data.Char,
  module Data.Coerce,
  module Data.Enum,
  module Data.Eq,
  module Data.Fractional,
  module Data.Function,
  module Data.Ord,
  module Data.Num,
  module Data.Records,
  module Data.Typeable,
  module Data.Monoid.Internal,
  module Data.String,
  module Text.ParserCombinators.ReadPrec,
  module Text.Read.Internal,
  module Text.Read.Lex,
  module Text.Show,
  module Mhs.Builtin,
  ) where
--
-- These are the identifiers that can be generated by the compiler,
-- so the always have to be in scope.
-- In the compiler this module is treated specially, it is imported
-- qualified with the name B@, this ways these names are always available
-- qualified, but under a name that cannot be used accidentally.
-- If the Prelude is not imported, then neither is this module.
import qualified Prelude()
import Control.Error(error)
import Control.Monad(Monad(..))
import Control.Monad.Fail(MonadFail(..))
import {-# SOURCE #-} Control.Monad.Fix(_mfix)
import Data.Bool((&&), Bool(..))
import Data.Char(Char)
import Data.Coerce(Coercible, coerce)
import Data.Enum(Enum(enumFrom, enumFromThen, enumFromTo, enumFromThenTo))
import Data.Eq(Eq(..))
import Data.Fractional(Fractional(fromRational))
import Data.Function((.))
import Data.Ord(Ord(..), Ordering(..))
import Data.Num(Num((+), (-), (*), fromInteger, negate))
import Data.Proxy(Proxy(..))
import Data.Monoid.Internal(Semigroup(..))
import Data.String(IsString(..))
import Data.Records(HasField(..), SetField(..), composeSet)
import {-# SOURCE #-} Data.Typeable(Typeable(..), _mkTyCon)
import Text.ParserCombinators.ReadPrec((+++), pfail, prec, step, reset)
import Text.Read.Internal(Read(..), readListDefault, readListPrecDefault, parens, expectP, readField)
import Text.Read.Lex(Lexeme(..))
import Text.Show(Show(..), showString, showParen)

-- Types to fake unboxed sums
data USum2 a0 a1 = USum2_0 a0 | USum2_1 a1
data USum3 a0 a1 a2 = USum3_0 a0 | USum3_1 a1 | USum3_2 a2
data USum4 a0 a1 a2 a3 = USum4_0 a0 | USum4_1 a1 | USum4_2 a2 | USum4_3 a3

-- Types to fake unboxed tuples
data UProd0 = UProd0
data UProd1 a0 = UProd1 a0
data UProd2 a0 a1 = UProd2 a0 a1
data UProd3 a0 a1 a2 = UProd3 a0 a1 a2
data UProd4 a0 a1 a2 a3 = UProd4 a0 a1 a2 a3
